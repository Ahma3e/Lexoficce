# ðŸ¤– KI-Integration & Erweiterte Analyse-Features
## Intelligente Automatisierung fÃ¼r Lexware-Rechnungen

---

## ðŸ§  KI-basierte Funktionen

### 1. Intelligente Kategorisierung
```javascript
// AI-Powered Kategorisierung von Rechnungen
const aiCategorizeInvoices = async (invoices) => {
  const categorizedInvoices = [];
  
  // Trainiertes Modell fÃ¼r Kategorisierung
  const categoryModel = {
    keywords: {
      'IT-Dienstleistungen': [
        'webdesign', 'software', 'entwicklung', 'programmierung', 
        'hosting', 'server', 'database', 'api', 'website', 'app'
      ],
      'Marketing': [
        'seo', 'social media', 'werbung', 'marketing', 'kampagne',
        'google ads', 'facebook', 'branding', 'content'
      ],
      'Beratung': [
        'beratung', 'consulting', 'analyse', 'strategie', 'konzept',
        'audit', 'review', 'workshop', 'training'
      ],
      'Design': [
        'logo', 'design', 'grafik', 'layout', 'corporate design',
        'illustration', 'banner', 'print', 'flyer'
      ]
    },
    
    patterns: {
      'Wiederkehrende Rechnung': /monatlich|quarterly|jÃ¤hrlich|abo|subscription/i,
      'Einmaliges Projekt': /projekt|einmalig|setup|implementation/i,
      'Wartung': /wartung|maintenance|support|pflege/i
    }
  };
  
  for (const invoice of invoices) {
    const description = (invoice.bezeichnung || '').toLowerCase();
    let category = 'Sonstige';
    let confidence = 0;
    let isRecurring = false;
    
    // Keyword-basierte Kategorisierung
    for (const [cat, keywords] of Object.entries(categoryModel.keywords)) {
      const matches = keywords.filter(keyword => 
        description.includes(keyword.toLowerCase())
      ).length;
      
      const currentConfidence = (matches / keywords.length) * 100;
      
      if (currentConfidence > confidence) {
        category = cat;
        confidence = currentConfidence;
      }
    }
    
    // Pattern-Erkennung fÃ¼r Rechnungstyp
    for (const [pattern, regex] of Object.entries(categoryModel.patterns)) {
      if (regex.test(description)) {
        if (pattern === 'Wiederkehrende Rechnung') {
          isRecurring = true;
        }
      }
    }
    
    // Erweiterte AI-Analyse (OpenAI GPT Integration)
    const aiAnalysis = await analyzeInvoiceWithGPT(invoice);
    
    categorizedInvoices.push({
      ...invoice,
      ai_kategorie: category,
      ai_confidence: Math.round(confidence),
      is_recurring: isRecurring,
      ai_analysis: aiAnalysis,
      processing_notes: `Kategorisiert mit ${confidence.toFixed(1)}% Konfidenz`
    });
  }
  
  return categorizedInvoices;
};

// OpenAI GPT Integration fÃ¼r detaillierte Analyse
const analyzeInvoiceWithGPT = async (invoice) => {
  const prompt = `
    Analysiere folgende Rechnung und gib strukturierte Insights:
    
    Rechnungsnummer: ${invoice.rechnungsnummer}
    Kunde: ${invoice.kunde_name}
    Beschreibung: ${invoice.bezeichnung}
    Betrag: â‚¬${invoice.bruttobetrag}
    
    Bitte analysiere:
    1. Kategorie (IT, Marketing, Design, Beratung, Sonstige)
    2. PrioritÃ¤t (Hoch/Mittel/Niedrig)
    3. GeschÃ¤ftsrelevanz (1-10)
    4. Empfohlene Nachfass-Aktionen
    5. Risikobewertung
    
    Antwort als JSON:
  `;
  
  try {
    const gptResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer ' + process.env.OPENAI_API_KEY,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: 'Du bist ein Experte fÃ¼r GeschÃ¤ftsanalyse und Rechnungsmanagement.'
          },
          {
            role: 'user', 
            content: prompt
          }
        ],
        temperature: 0.3,
        max_tokens: 500
      })
    });
    
    const result = await gptResponse.json();
    return JSON.parse(result.choices[0].message.content);
    
  } catch (error) {
    console.log('GPT-Analyse fehlgeschlagen:', error);
    return {
      kategorie: 'Analyse nicht verfÃ¼gbar',
      prioritaet: 'Mittel',
      geschaeftsrelevanz: 5,
      empfehlungen: [],
      risiko: 'Unbekannt'
    };
  }
};
```

### 2. Prediktive Analysen
```javascript
// Predictive Analytics fÃ¼r Cashflow und Umsatzprognosen
const predictiveCashflowAnalysis = (historicalData) => {
  const predictions = {
    nextMonth: {},
    nextQuarter: {},
    nextYear: {},
    trends: {},
    recommendations: []
  };
  
  // Zeitreihenanalyse der letzten 12 Monate
  const monthlyRevenue = calculateMonthlyRevenue(historicalData);
  const seasonalFactors = calculateSeasonalFactors(monthlyRevenue);
  const trendline = calculateTrendline(monthlyRevenue);
  
  // NÃ¤chster Monat Prognose
  const currentMonth = new Date().getMonth();
  const seasonalAdjustment = seasonalFactors[currentMonth + 1] || 1;
  const baseProjection = trendline.slope * (monthlyRevenue.length + 1) + trendline.intercept;
  
  predictions.nextMonth = {
    revenue: Math.round(baseProjection * seasonalAdjustment),
    confidence: calculateConfidence(monthlyRevenue, trendline),
    factors: {
      trend: trendline.slope > 0 ? 'steigend' : 'fallend',
      seasonal: seasonalAdjustment > 1 ? 'gÃ¼nstiger Monat' : 'schwÃ¤cherer Monat',
      volatility: calculateVolatility(monthlyRevenue)
    }
  };
  
  // Quartals- und Jahresprognosen
  predictions.nextQuarter = projectQuarterly(trendline, seasonalFactors);
  predictions.nextYear = projectYearly(trendline, seasonalFactors);
  
  // Trend-Analysen
  predictions.trends = {
    customerRetention: analyzeCustomerRetention(historicalData),
    averageInvoiceValue: analyzeInvoiceValueTrends(historicalData),
    paymentBehavior: analyzePaymentTrends(historicalData),
    categoryPerformance: analyzeCategoryTrends(historicalData)
  };
  
  // Intelligente Empfehlungen
  predictions.recommendations = generateSmartRecommendations(predictions);
  
  return predictions;
};

// Machine Learning fÃ¼r Kundensegmentierung
const mlCustomerSegmentation = (customerData) => {
  const segments = {
    champions: [],      // Hoher Wert, hÃ¤ufige KÃ¤ufe
    loyalCustomers: [], // RegelmÃ¤ÃŸige KÃ¤ufe, mittlerer Wert
    potentialChurners: [], // RÃ¼cklÃ¤ufige AktivitÃ¤t
    newCustomers: [],   // Neue Kunden mit Potenzial
    atRisk: []         // Kunden mit Problemen
  };
  
  customerData.forEach(customer => {
    const metrics = calculateCustomerMetrics(customer);
    const segment = classifyCustomer(metrics);
    
    segments[segment].push({
      ...customer,
      segment: segment,
      metrics: metrics,
      recommendations: getSegmentRecommendations(segment, metrics)
    });
  });
  
  return segments;
};

const calculateCustomerMetrics = (customer) => {
  const invoices = customer.invoices || [];
  const now = new Date();
  
  return {
    totalRevenue: invoices.reduce((sum, inv) => sum + parseFloat(inv.bruttobetrag), 0),
    invoiceCount: invoices.length,
    averageInvoiceValue: invoices.length > 0 ? 
      invoices.reduce((sum, inv) => sum + parseFloat(inv.bruttobetrag), 0) / invoices.length : 0,
    lastInvoiceDate: invoices.length > 0 ? 
      new Date(Math.max(...invoices.map(inv => new Date(inv.leistungsdatum)))) : null,
    daysSinceLastInvoice: invoices.length > 0 ? 
      Math.floor((now - new Date(Math.max(...invoices.map(inv => new Date(inv.leistungsdatum))))) / (1000 * 60 * 60 * 24)) : 999,
    paymentBehavior: calculatePaymentScore(invoices),
    growthRate: calculateCustomerGrowthRate(invoices)
  };
};
```

### 3. Intelligente Anomalie-Erkennung
```javascript
// AI-basierte Anomalie-Erkennung
const detectAnomalies = (invoiceData) => {
  const anomalies = [];
  const statistics = calculateDataStatistics(invoiceData);
  
  invoiceData.forEach(invoice => {
    const anomalyChecks = [
      checkAmountAnomaly(invoice, statistics),
      checkDateAnomaly(invoice, statistics),
      checkCustomerAnomaly(invoice, statistics),
      checkDescriptionAnomaly(invoice, statistics)
    ];
    
    const detectedAnomalies = anomalyChecks.filter(check => check.isAnomaly);
    
    if (detectedAnomalies.length > 0) {
      anomalies.push({
        invoice: invoice.rechnungsnummer,
        anomalies: detectedAnomalies,
        severity: calculateAnomalySeverity(detectedAnomalies),
        recommendations: generateAnomalyRecommendations(detectedAnomalies)
      });
    }
  });
  
  return anomalies;
};

const checkAmountAnomaly = (invoice, statistics) => {
  const amount = parseFloat(invoice.bruttobetrag);
  const zscore = (amount - statistics.amount.mean) / statistics.amount.stdDev;
  
  // Z-Score basierte Anomalie-Erkennung
  if (Math.abs(zscore) > 2.5) {
    return {
      type: 'amount_anomaly',
      isAnomaly: true,
      severity: Math.abs(zscore) > 3 ? 'high' : 'medium',
      message: amount > statistics.amount.mean 
        ? `UngewÃ¶hnlich hoher Betrag: â‚¬${amount} (${zscore.toFixed(2)} Standardabweichungen Ã¼ber dem Durchschnitt)`
        : `UngewÃ¶hnlich niedriger Betrag: â‚¬${amount} (${Math.abs(zscore).toFixed(2)} Standardabweichungen unter dem Durchschnitt)`,
      zscore: zscore
    };
  }
  
  return { type: 'amount_anomaly', isAnomaly: false };
};

// Sentiment-Analyse fÃ¼r Rechnungsbeschreibungen
const analyzeSentiment = async (descriptions) => {
  const sentimentResults = [];
  
  for (const description of descriptions) {
    try {
      // Lokale Sentiment-Analyse oder Cloud-API
      const sentiment = await analyzeSentimentWithAI(description);
      
      sentimentResults.push({
        text: description,
        sentiment: sentiment.label,
        confidence: sentiment.score,
        emotions: sentiment.emotions,
        urgency: detectUrgency(description),
        businessImpact: assessBusinessImpact(description, sentiment)
      });
      
    } catch (error) {
      console.log('Sentiment-Analyse fehlgeschlagen:', error);
      sentimentResults.push({
        text: description,
        sentiment: 'neutral',
        confidence: 0.5,
        error: error.message
      });
    }
  }
  
  return sentimentResults;
};
```

---

## ðŸ“Š Erweiterte Business Intelligence

### 1. Customer Lifetime Value (CLV) Berechnung
```javascript
const calculateCustomerLifetimeValue = (customers) => {
  return customers.map(customer => {
    const invoices = customer.invoices || [];
    const monthlyData = groupInvoicesByMonth(invoices);
    
    // Grundmetriken
    const totalRevenue = invoices.reduce((sum, inv) => sum + parseFloat(inv.bruttobetrag), 0);
    const customerLifetimeMonths = calculateCustomerLifetime(invoices);
    const averageMonthlyRevenue = totalRevenue / customerLifetimeMonths;
    
    // Erweiterte CLV-Berechnung mit Retention und Churn
    const retentionRate = calculateRetentionRate(monthlyData);
    const churnProbability = 1 - retentionRate;
    const discountRate = 0.1; // 10% jÃ¤hrlich
    
    // CLV Formel: (Average Monthly Revenue * Gross Margin) / (Discount Rate + Churn Rate)
    const grossMargin = 0.7; // Annahme: 70% Marge
    const clv = (averageMonthlyRevenue * grossMargin) / (discountRate/12 + churnProbability);
    
    return {
      customer_id: customer.kunde_nummer,
      customer_name: customer.kunde_name,
      clv: Math.round(clv),
      totalRevenue: Math.round(totalRevenue),
      customerLifetimeMonths: customerLifetimeMonths,
      averageMonthlyRevenue: Math.round(averageMonthlyRevenue),
      retentionRate: Math.round(retentionRate * 100),
      churnProbability: Math.round(churnProbability * 100),
      segment: classifyCustomerByValue(clv),
      recommendations: generateCLVRecommendations(clv, churnProbability)
    };
  });
};

// ABC-Analyse fÃ¼r Kundenwertigkeit
const performABCAnalysis = (customers) => {
  const sortedCustomers = customers
    .sort((a, b) => b.totalRevenue - a.totalRevenue);
  
  const totalRevenue = sortedCustomers.reduce((sum, c) => sum + c.totalRevenue, 0);
  let cumulativeRevenue = 0;
  
  return sortedCustomers.map((customer, index) => {
    cumulativeRevenue += customer.totalRevenue;
    const cumulativePercentage = (cumulativeRevenue / totalRevenue) * 100;
    
    let segment;
    if (cumulativePercentage <= 80) {
      segment = 'A'; // Top 80% des Umsatzes
    } else if (cumulativePercentage <= 95) {
      segment = 'B'; // NÃ¤chste 15%
    } else {
      segment = 'C'; // Letzte 5%
    }
    
    return {
      ...customer,
      abc_segment: segment,
      revenue_rank: index + 1,
      cumulative_revenue_percentage: Math.round(cumulativePercentage * 100) / 100,
      strategic_importance: getStrategicImportance(segment, customer)
    };
  });
};
```

### 2. SaisonalitÃ¤ts-Analyse
```javascript
const analyzeSeasonality = (monthlyData) => {
  const seasonalAnalysis = {
    quarterlyTrends: {},
    monthlyPatterns: {},
    seasonalIndices: {},
    recommendations: []
  };
  
  // Quartalsweise Analyse
  const quarters = groupDataByQuarter(monthlyData);
  Object.keys(quarters).forEach(quarter => {
    const quarterData = quarters[quarter];
    seasonalAnalysis.quarterlyTrends[quarter] = {
      averageRevenue: calculateAverage(quarterData.map(d => d.revenue)),
      volatility: calculateVolatility(quarterData.map(d => d.revenue)),
      growth: calculateQuarterGrowth(quarterData),
      peakMonth: findPeakMonth(quarterData),
      characteristics: identifyQuarterCharacteristics(quarter, quarterData)
    };
  });
  
  // Monatliche Muster
  for (let month = 1; month <= 12; month++) {
    const monthData = monthlyData.filter(d => new Date(d.period).getMonth() + 1 === month);
    
    if (monthData.length > 0) {
      seasonalAnalysis.monthlyPatterns[month] = {
        averageRevenue: calculateAverage(monthData.map(d => d.revenue)),
        occurrences: monthData.length,
        trend: calculateMonthTrend(monthData),
        reliability: calculateReliability(monthData),
        recommendations: generateMonthRecommendations(month, monthData)
      };
    }
  }
  
  // Saisonale Indices berechnen
  const annualAverage = calculateAnnualAverage(monthlyData);
  for (let month = 1; month <= 12; month++) {
    const monthAverage = seasonalAnalysis.monthlyPatterns[month]?.averageRevenue || annualAverage;
    seasonalAnalysis.seasonalIndices[month] = (monthAverage / annualAverage) * 100;
  }
  
  return seasonalAnalysis;
};

// KapazitÃ¤tsplanung basierend auf Prognosen
const planCapacity = (predictions, currentCapacity) => {
  const capacityPlan = {
    currentUtilization: 0,
    projectedUtilization: {},
    recommendations: [],
    resourceNeeds: {},
    timeline: {}
  };
  
  // Aktuelle Auslastung berechnen
  capacityPlan.currentUtilization = (currentCapacity.used / currentCapacity.total) * 100;
  
  // Projizierte Auslastung fÃ¼r kommende Monate
  ['nextMonth', 'nextQuarter', 'nextYear'].forEach(period => {
    const projectedWorkload = predictions[period].revenue / currentCapacity.revenuePerUnit;
    capacityPlan.projectedUtilization[period] = (projectedWorkload / currentCapacity.total) * 100;
  });
  
  // Empfehlungen generieren
  if (capacityPlan.projectedUtilization.nextMonth > 90) {
    capacityPlan.recommendations.push({
      priority: 'high',
      type: 'capacity_increase',
      message: 'ErhÃ¶hung der KapazitÃ¤t fÃ¼r nÃ¤chsten Monat erforderlich',
      suggestedIncrease: Math.ceil((capacityPlan.projectedUtilization.nextMonth - 85) / 15) * 15
    });
  }
  
  return capacityPlan;
};
```

### 3. Intelligente Berichterstattung
```javascript
// Executive Dashboard mit KI-Insights
const generateExecutiveDashboard = async (data) => {
  const dashboard = {
    executiveSummary: await generateAISummary(data),
    keyMetrics: calculateKeyMetrics(data),
    insights: await generateBusinessInsights(data),
    alerts: generateIntelligentAlerts(data),
    recommendations: await generateStrategicRecommendations(data),
    marketAnalysis: await performMarketAnalysis(data)
  };
  
  return dashboard;
};

const generateAISummary = async (data) => {
  const prompt = `
    Erstelle eine Executive Summary basierend auf folgenden GeschÃ¤ftsdaten:
    
    Gesamtumsatz: â‚¬${data.statistics.totalRevenue}
    Anzahl Rechnungen: ${data.statistics.invoiceCount}
    Durchschnittlicher Rechnungswert: â‚¬${data.statistics.averageInvoiceValue}
    Wachstumsrate: ${data.trends.revenueGrowth}%
    Kundenanzahl: ${data.statistics.customerCount}
    
    Top-Kategorien: ${Object.keys(data.categoryAnalysis).slice(0, 3).join(', ')}
    
    Bitte erstelle eine prÃ¤gnante 3-Satz-Zusammenfassung mit:
    1. Gesamtperformance
    2. Wichtigste Trends
    3. Kritische Handlungsempfehlung
  `;
  
  const summary = await callOpenAI(prompt);
  return summary;
};

// Automatische Insight-Generierung
const generateBusinessInsights = async (data) => {
  const insights = [];
  
  // Revenue-Insights
  if (data.trends.revenueGrowth > 20) {
    insights.push({
      type: 'positive',
      category: 'revenue',
      title: 'Starkes Umsatzwachstum',
      description: `Ihr Umsatz ist um ${data.trends.revenueGrowth}% gewachsen - ein hervorragendes Ergebnis!`,
      action: 'Skalierungsstrategien evaluieren'
    });
  }
  
  // Customer-Insights
  const retentionRate = calculateOverallRetentionRate(data);
  if (retentionRate < 80) {
    insights.push({
      type: 'warning',
      category: 'customer',
      title: 'Kundenretention optimierungsbedÃ¼rftig',
      description: `Die Kundenretentionsrate von ${retentionRate}% liegt unter dem Benchmark von 80%`,
      action: 'Customer Success Programme implementieren'
    });
  }
  
  // Profitability-Insights
  const profitabilityByCategory = analyzeCategoryProfitability(data);
  const mostProfitable = Object.keys(profitabilityByCategory)[0];
  insights.push({
    type: 'opportunity',
    category: 'profitability',
    title: `${mostProfitable} ist Ihre profitabelste Kategorie`,
    description: `Focus auf ${mostProfitable} kÃ¶nnte ProfitabilitÃ¤t um 15-25% steigern`,
    action: `Marketing-Budget fÃ¼r ${mostProfitable} erhÃ¶hen`
  });
  
  return insights;
};

// Strategische Empfehlungen mit KI
const generateStrategicRecommendations = async (data) => {
  const recommendations = [];
  
  // Datenbasierte Empfehlungen
  const analysis = performAdvancedAnalysis(data);
  
  // Preisoptimierung
  if (analysis.pricingOpportunity > 0) {
    recommendations.push({
      category: 'pricing',
      priority: 'high',
      title: 'Preisoptimierung mÃ¶glich',
      description: `Analyse zeigt Potenzial fÃ¼r ${analysis.pricingOpportunity}% PreiserhÃ¶hung`,
      expectedImpact: `+â‚¬${Math.round(data.statistics.totalRevenue * analysis.pricingOpportunity / 100)} Jahresumsatz`,
      implementation: [
        'A/B-Test mit 5% PreiserhÃ¶hung bei Neukunden',
        'Wertbasierte Preisgestaltung fÃ¼r Premium-Services',
        'Staffelpreise fÃ¼r Volumen-Kunden Ã¼berdenken'
      ]
    });
  }
  
  // Customer Acquisition
  const acquisitionAnalysis = analyzeCustomerAcquisition(data);
  recommendations.push({
    category: 'customer_acquisition',
    priority: 'medium',
    title: 'Kundenakquise-Strategie optimieren',
    description: `Fokus auf ${acquisitionAnalysis.bestChannel} zeigt hÃ¶chste ROI`,
    expectedImpact: `+${acquisitionAnalysis.projectedNewCustomers} Neukunden/Monat`,
    implementation: acquisitionAnalysis.actionItems
  });
  
  return recommendations;
};
```

---

## ðŸ”® Zukunftsorientierte Features

### 1. Blockchain-Integration fÃ¼r Rechnungsverifikation
```javascript
// Blockchain-basierte Rechnungsverifikation
const blockchainVerification = {
  createInvoiceHash: (invoice) => {
    const invoiceString = JSON.stringify({
      number: invoice.rechnungsnummer,
      date: invoice.leistungsdatum,
      amount: invoice.bruttobetrag,
      customer: invoice.kunde_name
    });
    
    return crypto.createHash('sha256').update(invoiceString).digest('hex');
  },
  
  storeOnBlockchain: async (invoiceHash, invoiceNumber) => {
    // Integration mit Blockchain-Provider (z.B. Ethereum, Hyperledger)
    const transaction = {
      hash: invoiceHash,
      invoice_number: invoiceNumber,
      timestamp: new Date().toISOString(),
      verified: true
    };
    
    // Hier wÃ¼rde die eigentliche Blockchain-Transaktion stattfinden
    console.log('Blockchain-Eintrag erstellt:', transaction);
    return transaction;
  },
  
  verifyInvoice: async (invoice) => {
    const currentHash = blockchainVerification.createInvoiceHash(invoice);
    // Vergleich mit Blockchain-gespeichertem Hash
    return { verified: true, hash: currentHash };
  }
};
```

### 2. IoT-Integration fÃ¼r automatische Rechnungserstellung
```javascript
// IoT-basierte automatische Rechnungsgenerierung
const iotIntegration = {
  trackServiceUsage: async (deviceData) => {
    const usage = {
      device_id: deviceData.id,
      usage_hours: deviceData.operatingHours,
      service_type: deviceData.serviceType,
      automatic_billing: true
    };
    
    // Automatische Rechnungserstellung basierend auf IoT-Daten
    if (usage.usage_hours >= deviceData.billingThreshold) {
      return await createAutomaticInvoice(usage);
    }
    
    return null;
  },
  
  createAutomaticInvoice: async (usage) => {
    const invoice = {
      type: 'automatic',
      service_description: `${usage.service_type} - ${usage.usage_hours} Stunden`,
      amount: usage.usage_hours * usage.hourly_rate,
      created_by: 'IoT_System',
      requires_review: usage.amount > 1000
    };
    
    return invoice;
  }
};
```

Diese KI-Integration und erweiterten Analyse-Features machen Ihre Lexware-Automatisierung zu einem intelligenten Business-Intelligence-System, das nicht nur Daten verarbeitet, sondern auch strategische Einblicke und Empfehlungen liefert.
